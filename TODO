
1- CONFIGURACIÓN DE LA BASE DE DATOS DE MONGODB
 - Vamos a https://www.mongodb.com/cloud/atlas/register y nos registramos.
 - Una vez iniciado sesión, en la barra lateral, está la sección de DEPLOYMENT
                                                                        ↓
                                                                     Database
 - Hacen click en + CREATE y de las tres opciones de db elijen la free (más que suficiente para el challenge) y la región.
 - Una vez tienen el cluster creado, van a Network Access, en la sección de SECURITY de la barra lateral 
 y agregan los IP desde donde queremos que se puedan conectar a nuestra base de datos -> ¿Cómo obtengo mi IP público? https://www.whatismyip.com/ 
 - Después, seguimos en SECURITY y vamos a Quickstart, donde vamos a definir nuestro username y password (nos guardamos la password en un lugar seguro).
 - Y finalmente, ubicados en la pestaña de Data Services, le damos a Connect, elegimos la opción de Connect to your application y copiamos la url.
 - Vamos a tener que reemplazar la parte de <password> por nuestra contraseña.
    Características del cluster free:
        Storage: 512MB
        Memory: 0.5GB
        Data transfer: 10 GB por día para transferencia de datos, ya sea que entre o salga del cluster.
        Collections: Hasta 500.
        No tiene back up.

2- MONTAR EL BACK
-	Creamos la carpeta api, le agregamos el archivo .gitignore.
-	Creamos nuestro archivo package.json y vamos a instalar:
-	*cors, middleware de Express que simplifica la configuración de CORS, al manejar automáticamente los encabezados necesarios (en principio no lo vamos a usar).
-	*dotenv para poder manejarnos con el archivo .env
-	*express que es nuestro framework para Node.
-	*mongoose que vamos a usar para construir el modelo para los mensajes del chat.
-	*nodemon que vamos a usar en nuestro script de start para que se vuelva a levantar el servidor después de cada cambio que hagamos.
-	*socket.io con el que vamos a asegurarnos de mantener la relación bidireccional en tiempo real cliente/servidor para que los chats se actualicen sin necesidad de recargar la página.


3- CREACIÓN DEL MODELO PARA LOS MENSAJES DEL CHAT CON MONGOOSE
 - En nuestro back: api/src/models.

4- GESTIONAMOS LAS RUTAS PARA EL ENVÍO Y RECEPCIÓN DE MENSAJES
 - api/src/routes

5- CONFIGURAMOS Y LEVANTAMOS NUESTRO SERVIDOR
 - api/app.js
 - api/index.js

 6- MONTAMOS FRONT
  - npm create vite@latest client --template react-ts
  - Con las flechas y Enter confirmamos la opción de la plantilla React y Typescript.
  - cd client
  - npm install
  - npm run dev (confirmamos que se haya levantado el front en el puerto  http://localhost:5173/)
Elegimos Vite como herramienta de compilación porque es más rápido.
Nos va a requerir una versión de Node mayor a la 16, puede que alguna plantilla pida más, el gestor de paquetes nos va a advertir.
¿Cómo sabemos qué versión tenemos?
(en consola):   node -v
VENTAJAS DE TYPESCRIPT
-	Al asignar tipos estáticos, su verificación permite detectar errores comunes en tiempo de compilación, lo que ayuda a prevenir errores en tiempo de ejecución y mejora la calidad del código.
-	El sistema de tipos vuelve explícito cómo tienen que usarse las funciones y variables, lo que hace al código más fácil de entender y facilita el trabajo en equipo.


7- CREAMOS FORMULARIO PARA CARGAR LOS MENSAJES

8- CREAMOS EL COMPONENTE DONDE SE MUESTREN LOS MENSAJES

9- INTEGRAMOS AMBOS COMPONENTES EN NUESTRA <app/>

10- ESTABLECEMOS LA COMUNICACIÓN EN TIEMPO REAL CON WEBSOCKET
 - En nuestro back creamos una instancia de Socket.IO y aprovechamos la funcionalidad de MongoDB "Change Streams" para observar cuando haya cambios en la colección.
 - Con la instacia de Socket.IO disparamos un evento de 'update' cuando se haya producido el cambio en la colección.
 - En nuestro front llamamos a 'socket.io-client' y creamos una instacia para escuchar el evento de 'update' y renderizar el nuevo mensaje.
